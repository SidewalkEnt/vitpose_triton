// Copyright 2020-2024, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//  * Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
//  * Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
//  * Neither the name of NVIDIA CORPORATION nor the names of its
//    contributors may be used to endorse or promote products derived
//    from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY
// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
// PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY
// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: grpc_service.proto

package genconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	gen "grpc_test/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GRPCInferenceServiceName is the fully-qualified name of the GRPCInferenceService service.
	GRPCInferenceServiceName = "inference.GRPCInferenceService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GRPCInferenceServiceServerLiveProcedure is the fully-qualified name of the GRPCInferenceService's
	// ServerLive RPC.
	GRPCInferenceServiceServerLiveProcedure = "/inference.GRPCInferenceService/ServerLive"
	// GRPCInferenceServiceServerReadyProcedure is the fully-qualified name of the
	// GRPCInferenceService's ServerReady RPC.
	GRPCInferenceServiceServerReadyProcedure = "/inference.GRPCInferenceService/ServerReady"
	// GRPCInferenceServiceModelReadyProcedure is the fully-qualified name of the GRPCInferenceService's
	// ModelReady RPC.
	GRPCInferenceServiceModelReadyProcedure = "/inference.GRPCInferenceService/ModelReady"
	// GRPCInferenceServiceServerMetadataProcedure is the fully-qualified name of the
	// GRPCInferenceService's ServerMetadata RPC.
	GRPCInferenceServiceServerMetadataProcedure = "/inference.GRPCInferenceService/ServerMetadata"
	// GRPCInferenceServiceModelMetadataProcedure is the fully-qualified name of the
	// GRPCInferenceService's ModelMetadata RPC.
	GRPCInferenceServiceModelMetadataProcedure = "/inference.GRPCInferenceService/ModelMetadata"
	// GRPCInferenceServiceModelInferProcedure is the fully-qualified name of the GRPCInferenceService's
	// ModelInfer RPC.
	GRPCInferenceServiceModelInferProcedure = "/inference.GRPCInferenceService/ModelInfer"
	// GRPCInferenceServiceModelStreamInferProcedure is the fully-qualified name of the
	// GRPCInferenceService's ModelStreamInfer RPC.
	GRPCInferenceServiceModelStreamInferProcedure = "/inference.GRPCInferenceService/ModelStreamInfer"
	// GRPCInferenceServiceModelConfigProcedure is the fully-qualified name of the
	// GRPCInferenceService's ModelConfig RPC.
	GRPCInferenceServiceModelConfigProcedure = "/inference.GRPCInferenceService/ModelConfig"
	// GRPCInferenceServiceModelStatisticsProcedure is the fully-qualified name of the
	// GRPCInferenceService's ModelStatistics RPC.
	GRPCInferenceServiceModelStatisticsProcedure = "/inference.GRPCInferenceService/ModelStatistics"
	// GRPCInferenceServiceRepositoryIndexProcedure is the fully-qualified name of the
	// GRPCInferenceService's RepositoryIndex RPC.
	GRPCInferenceServiceRepositoryIndexProcedure = "/inference.GRPCInferenceService/RepositoryIndex"
	// GRPCInferenceServiceRepositoryModelLoadProcedure is the fully-qualified name of the
	// GRPCInferenceService's RepositoryModelLoad RPC.
	GRPCInferenceServiceRepositoryModelLoadProcedure = "/inference.GRPCInferenceService/RepositoryModelLoad"
	// GRPCInferenceServiceRepositoryModelUnloadProcedure is the fully-qualified name of the
	// GRPCInferenceService's RepositoryModelUnload RPC.
	GRPCInferenceServiceRepositoryModelUnloadProcedure = "/inference.GRPCInferenceService/RepositoryModelUnload"
	// GRPCInferenceServiceSystemSharedMemoryStatusProcedure is the fully-qualified name of the
	// GRPCInferenceService's SystemSharedMemoryStatus RPC.
	GRPCInferenceServiceSystemSharedMemoryStatusProcedure = "/inference.GRPCInferenceService/SystemSharedMemoryStatus"
	// GRPCInferenceServiceSystemSharedMemoryRegisterProcedure is the fully-qualified name of the
	// GRPCInferenceService's SystemSharedMemoryRegister RPC.
	GRPCInferenceServiceSystemSharedMemoryRegisterProcedure = "/inference.GRPCInferenceService/SystemSharedMemoryRegister"
	// GRPCInferenceServiceSystemSharedMemoryUnregisterProcedure is the fully-qualified name of the
	// GRPCInferenceService's SystemSharedMemoryUnregister RPC.
	GRPCInferenceServiceSystemSharedMemoryUnregisterProcedure = "/inference.GRPCInferenceService/SystemSharedMemoryUnregister"
	// GRPCInferenceServiceCudaSharedMemoryStatusProcedure is the fully-qualified name of the
	// GRPCInferenceService's CudaSharedMemoryStatus RPC.
	GRPCInferenceServiceCudaSharedMemoryStatusProcedure = "/inference.GRPCInferenceService/CudaSharedMemoryStatus"
	// GRPCInferenceServiceCudaSharedMemoryRegisterProcedure is the fully-qualified name of the
	// GRPCInferenceService's CudaSharedMemoryRegister RPC.
	GRPCInferenceServiceCudaSharedMemoryRegisterProcedure = "/inference.GRPCInferenceService/CudaSharedMemoryRegister"
	// GRPCInferenceServiceCudaSharedMemoryUnregisterProcedure is the fully-qualified name of the
	// GRPCInferenceService's CudaSharedMemoryUnregister RPC.
	GRPCInferenceServiceCudaSharedMemoryUnregisterProcedure = "/inference.GRPCInferenceService/CudaSharedMemoryUnregister"
	// GRPCInferenceServiceTraceSettingProcedure is the fully-qualified name of the
	// GRPCInferenceService's TraceSetting RPC.
	GRPCInferenceServiceTraceSettingProcedure = "/inference.GRPCInferenceService/TraceSetting"
	// GRPCInferenceServiceLogSettingsProcedure is the fully-qualified name of the
	// GRPCInferenceService's LogSettings RPC.
	GRPCInferenceServiceLogSettingsProcedure = "/inference.GRPCInferenceService/LogSettings"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	gRPCInferenceServiceServiceDescriptor                            = gen.File_grpc_service_proto.Services().ByName("GRPCInferenceService")
	gRPCInferenceServiceServerLiveMethodDescriptor                   = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ServerLive")
	gRPCInferenceServiceServerReadyMethodDescriptor                  = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ServerReady")
	gRPCInferenceServiceModelReadyMethodDescriptor                   = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ModelReady")
	gRPCInferenceServiceServerMetadataMethodDescriptor               = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ServerMetadata")
	gRPCInferenceServiceModelMetadataMethodDescriptor                = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ModelMetadata")
	gRPCInferenceServiceModelInferMethodDescriptor                   = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ModelInfer")
	gRPCInferenceServiceModelStreamInferMethodDescriptor             = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ModelStreamInfer")
	gRPCInferenceServiceModelConfigMethodDescriptor                  = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ModelConfig")
	gRPCInferenceServiceModelStatisticsMethodDescriptor              = gRPCInferenceServiceServiceDescriptor.Methods().ByName("ModelStatistics")
	gRPCInferenceServiceRepositoryIndexMethodDescriptor              = gRPCInferenceServiceServiceDescriptor.Methods().ByName("RepositoryIndex")
	gRPCInferenceServiceRepositoryModelLoadMethodDescriptor          = gRPCInferenceServiceServiceDescriptor.Methods().ByName("RepositoryModelLoad")
	gRPCInferenceServiceRepositoryModelUnloadMethodDescriptor        = gRPCInferenceServiceServiceDescriptor.Methods().ByName("RepositoryModelUnload")
	gRPCInferenceServiceSystemSharedMemoryStatusMethodDescriptor     = gRPCInferenceServiceServiceDescriptor.Methods().ByName("SystemSharedMemoryStatus")
	gRPCInferenceServiceSystemSharedMemoryRegisterMethodDescriptor   = gRPCInferenceServiceServiceDescriptor.Methods().ByName("SystemSharedMemoryRegister")
	gRPCInferenceServiceSystemSharedMemoryUnregisterMethodDescriptor = gRPCInferenceServiceServiceDescriptor.Methods().ByName("SystemSharedMemoryUnregister")
	gRPCInferenceServiceCudaSharedMemoryStatusMethodDescriptor       = gRPCInferenceServiceServiceDescriptor.Methods().ByName("CudaSharedMemoryStatus")
	gRPCInferenceServiceCudaSharedMemoryRegisterMethodDescriptor     = gRPCInferenceServiceServiceDescriptor.Methods().ByName("CudaSharedMemoryRegister")
	gRPCInferenceServiceCudaSharedMemoryUnregisterMethodDescriptor   = gRPCInferenceServiceServiceDescriptor.Methods().ByName("CudaSharedMemoryUnregister")
	gRPCInferenceServiceTraceSettingMethodDescriptor                 = gRPCInferenceServiceServiceDescriptor.Methods().ByName("TraceSetting")
	gRPCInferenceServiceLogSettingsMethodDescriptor                  = gRPCInferenceServiceServiceDescriptor.Methods().ByName("LogSettings")
)

// GRPCInferenceServiceClient is a client for the inference.GRPCInferenceService service.
type GRPCInferenceServiceClient interface {
	// @@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
	// @@       (ServerLiveResponse)
	// @@
	// @@     Check liveness of the inference server.
	// @@
	ServerLive(context.Context, *connect.Request[gen.ServerLiveRequest]) (*connect.Response[gen.ServerLiveResponse], error)
	// @@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
	// @@       (ServerReadyResponse)
	// @@
	// @@     Check readiness of the inference server.
	// @@
	ServerReady(context.Context, *connect.Request[gen.ServerReadyRequest]) (*connect.Response[gen.ServerReadyResponse], error)
	// @@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
	// @@       (ModelReadyResponse)
	// @@
	// @@     Check readiness of a model in the inference server.
	// @@
	ModelReady(context.Context, *connect.Request[gen.ModelReadyRequest]) (*connect.Response[gen.ModelReadyResponse], error)
	// @@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
	// @@       (ServerMetadataResponse)
	// @@
	// @@     Get server metadata.
	// @@
	ServerMetadata(context.Context, *connect.Request[gen.ServerMetadataRequest]) (*connect.Response[gen.ServerMetadataResponse], error)
	// @@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
	// @@       (ModelMetadataResponse)
	// @@
	// @@     Get model metadata.
	// @@
	ModelMetadata(context.Context, *connect.Request[gen.ModelMetadataRequest]) (*connect.Response[gen.ModelMetadataResponse], error)
	// @@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
	// @@       (ModelInferResponse)
	// @@
	// @@     Perform inference using a specific model.
	// @@
	ModelInfer(context.Context, *connect.Request[gen.ModelInferRequest]) (*connect.Response[gen.ModelInferResponse], error)
	// @@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
	// @@       (stream ModelStreamInferResponse)
	// @@
	// @@     Perform streaming inference.
	// @@
	ModelStreamInfer(context.Context) *connect.BidiStreamForClient[gen.ModelInferRequest, gen.ModelStreamInferResponse]
	// @@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
	// @@       (ModelConfigResponse)
	// @@
	// @@     Get model configuration.
	// @@
	ModelConfig(context.Context, *connect.Request[gen.ModelConfigRequest]) (*connect.Response[gen.ModelConfigResponse], error)
	// @@  .. cpp:var:: rpc ModelStatistics(
	// @@                     ModelStatisticsRequest)
	// @@                   returns (ModelStatisticsResponse)
	// @@
	// @@     Get the cumulative inference statistics for a model.
	// @@
	ModelStatistics(context.Context, *connect.Request[gen.ModelStatisticsRequest]) (*connect.Response[gen.ModelStatisticsResponse], error)
	// @@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
	// @@       (RepositoryIndexResponse)
	// @@
	// @@     Get the index of model repository contents.
	// @@
	RepositoryIndex(context.Context, *connect.Request[gen.RepositoryIndexRequest]) (*connect.Response[gen.RepositoryIndexResponse], error)
	// @@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
	// @@       (RepositoryModelLoadResponse)
	// @@
	// @@     Load or reload a model from a repository.
	// @@
	RepositoryModelLoad(context.Context, *connect.Request[gen.RepositoryModelLoadRequest]) (*connect.Response[gen.RepositoryModelLoadResponse], error)
	// @@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
	// @@       returns (RepositoryModelUnloadResponse)
	// @@
	// @@     Unload a model.
	// @@
	RepositoryModelUnload(context.Context, *connect.Request[gen.RepositoryModelUnloadRequest]) (*connect.Response[gen.RepositoryModelUnloadResponse], error)
	// @@  .. cpp:var:: rpc SystemSharedMemoryStatus(
	// @@                     SystemSharedMemoryStatusRequest)
	// @@                   returns (SystemSharedMemoryStatusRespose)
	// @@
	// @@     Get the status of all registered system-shared-memory regions.
	// @@
	SystemSharedMemoryStatus(context.Context, *connect.Request[gen.SystemSharedMemoryStatusRequest]) (*connect.Response[gen.SystemSharedMemoryStatusResponse], error)
	// @@  .. cpp:var:: rpc SystemSharedMemoryRegister(
	// @@                     SystemSharedMemoryRegisterRequest)
	// @@                   returns (SystemSharedMemoryRegisterResponse)
	// @@
	// @@     Register a system-shared-memory region.
	// @@
	SystemSharedMemoryRegister(context.Context, *connect.Request[gen.SystemSharedMemoryRegisterRequest]) (*connect.Response[gen.SystemSharedMemoryRegisterResponse], error)
	// @@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
	// @@                     SystemSharedMemoryUnregisterRequest)
	// @@                   returns (SystemSharedMemoryUnregisterResponse)
	// @@
	// @@     Unregister a system-shared-memory region.
	// @@
	SystemSharedMemoryUnregister(context.Context, *connect.Request[gen.SystemSharedMemoryUnregisterRequest]) (*connect.Response[gen.SystemSharedMemoryUnregisterResponse], error)
	// @@  .. cpp:var:: rpc CudaSharedMemoryStatus(
	// @@                     CudaSharedMemoryStatusRequest)
	// @@                   returns (CudaSharedMemoryStatusRespose)
	// @@
	// @@     Get the status of all registered CUDA-shared-memory regions.
	// @@
	CudaSharedMemoryStatus(context.Context, *connect.Request[gen.CudaSharedMemoryStatusRequest]) (*connect.Response[gen.CudaSharedMemoryStatusResponse], error)
	// @@  .. cpp:var:: rpc CudaSharedMemoryRegister(
	// @@                     CudaSharedMemoryRegisterRequest)
	// @@                   returns (CudaSharedMemoryRegisterResponse)
	// @@
	// @@     Register a CUDA-shared-memory region.
	// @@
	CudaSharedMemoryRegister(context.Context, *connect.Request[gen.CudaSharedMemoryRegisterRequest]) (*connect.Response[gen.CudaSharedMemoryRegisterResponse], error)
	// @@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
	// @@                     CudaSharedMemoryUnregisterRequest)
	// @@                   returns (CudaSharedMemoryUnregisterResponse)
	// @@
	// @@     Unregister a CUDA-shared-memory region.
	// @@
	CudaSharedMemoryUnregister(context.Context, *connect.Request[gen.CudaSharedMemoryUnregisterRequest]) (*connect.Response[gen.CudaSharedMemoryUnregisterResponse], error)
	// @@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
	// @@                   returns (TraceSettingResponse)
	// @@
	// @@     Update and get the trace setting of the Triton server.
	// @@
	TraceSetting(context.Context, *connect.Request[gen.TraceSettingRequest]) (*connect.Response[gen.TraceSettingResponse], error)
	// @@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
	// @@                   returns (LogSettingsResponse)
	// @@
	// @@     Update and get the log settings of the Triton server.
	// @@
	LogSettings(context.Context, *connect.Request[gen.LogSettingsRequest]) (*connect.Response[gen.LogSettingsResponse], error)
}

// NewGRPCInferenceServiceClient constructs a client for the inference.GRPCInferenceService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGRPCInferenceServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GRPCInferenceServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &gRPCInferenceServiceClient{
		serverLive: connect.NewClient[gen.ServerLiveRequest, gen.ServerLiveResponse](
			httpClient,
			baseURL+GRPCInferenceServiceServerLiveProcedure,
			connect.WithSchema(gRPCInferenceServiceServerLiveMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		serverReady: connect.NewClient[gen.ServerReadyRequest, gen.ServerReadyResponse](
			httpClient,
			baseURL+GRPCInferenceServiceServerReadyProcedure,
			connect.WithSchema(gRPCInferenceServiceServerReadyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modelReady: connect.NewClient[gen.ModelReadyRequest, gen.ModelReadyResponse](
			httpClient,
			baseURL+GRPCInferenceServiceModelReadyProcedure,
			connect.WithSchema(gRPCInferenceServiceModelReadyMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		serverMetadata: connect.NewClient[gen.ServerMetadataRequest, gen.ServerMetadataResponse](
			httpClient,
			baseURL+GRPCInferenceServiceServerMetadataProcedure,
			connect.WithSchema(gRPCInferenceServiceServerMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modelMetadata: connect.NewClient[gen.ModelMetadataRequest, gen.ModelMetadataResponse](
			httpClient,
			baseURL+GRPCInferenceServiceModelMetadataProcedure,
			connect.WithSchema(gRPCInferenceServiceModelMetadataMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modelInfer: connect.NewClient[gen.ModelInferRequest, gen.ModelInferResponse](
			httpClient,
			baseURL+GRPCInferenceServiceModelInferProcedure,
			connect.WithSchema(gRPCInferenceServiceModelInferMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modelStreamInfer: connect.NewClient[gen.ModelInferRequest, gen.ModelStreamInferResponse](
			httpClient,
			baseURL+GRPCInferenceServiceModelStreamInferProcedure,
			connect.WithSchema(gRPCInferenceServiceModelStreamInferMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modelConfig: connect.NewClient[gen.ModelConfigRequest, gen.ModelConfigResponse](
			httpClient,
			baseURL+GRPCInferenceServiceModelConfigProcedure,
			connect.WithSchema(gRPCInferenceServiceModelConfigMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		modelStatistics: connect.NewClient[gen.ModelStatisticsRequest, gen.ModelStatisticsResponse](
			httpClient,
			baseURL+GRPCInferenceServiceModelStatisticsProcedure,
			connect.WithSchema(gRPCInferenceServiceModelStatisticsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		repositoryIndex: connect.NewClient[gen.RepositoryIndexRequest, gen.RepositoryIndexResponse](
			httpClient,
			baseURL+GRPCInferenceServiceRepositoryIndexProcedure,
			connect.WithSchema(gRPCInferenceServiceRepositoryIndexMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		repositoryModelLoad: connect.NewClient[gen.RepositoryModelLoadRequest, gen.RepositoryModelLoadResponse](
			httpClient,
			baseURL+GRPCInferenceServiceRepositoryModelLoadProcedure,
			connect.WithSchema(gRPCInferenceServiceRepositoryModelLoadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		repositoryModelUnload: connect.NewClient[gen.RepositoryModelUnloadRequest, gen.RepositoryModelUnloadResponse](
			httpClient,
			baseURL+GRPCInferenceServiceRepositoryModelUnloadProcedure,
			connect.WithSchema(gRPCInferenceServiceRepositoryModelUnloadMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		systemSharedMemoryStatus: connect.NewClient[gen.SystemSharedMemoryStatusRequest, gen.SystemSharedMemoryStatusResponse](
			httpClient,
			baseURL+GRPCInferenceServiceSystemSharedMemoryStatusProcedure,
			connect.WithSchema(gRPCInferenceServiceSystemSharedMemoryStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		systemSharedMemoryRegister: connect.NewClient[gen.SystemSharedMemoryRegisterRequest, gen.SystemSharedMemoryRegisterResponse](
			httpClient,
			baseURL+GRPCInferenceServiceSystemSharedMemoryRegisterProcedure,
			connect.WithSchema(gRPCInferenceServiceSystemSharedMemoryRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		systemSharedMemoryUnregister: connect.NewClient[gen.SystemSharedMemoryUnregisterRequest, gen.SystemSharedMemoryUnregisterResponse](
			httpClient,
			baseURL+GRPCInferenceServiceSystemSharedMemoryUnregisterProcedure,
			connect.WithSchema(gRPCInferenceServiceSystemSharedMemoryUnregisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cudaSharedMemoryStatus: connect.NewClient[gen.CudaSharedMemoryStatusRequest, gen.CudaSharedMemoryStatusResponse](
			httpClient,
			baseURL+GRPCInferenceServiceCudaSharedMemoryStatusProcedure,
			connect.WithSchema(gRPCInferenceServiceCudaSharedMemoryStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cudaSharedMemoryRegister: connect.NewClient[gen.CudaSharedMemoryRegisterRequest, gen.CudaSharedMemoryRegisterResponse](
			httpClient,
			baseURL+GRPCInferenceServiceCudaSharedMemoryRegisterProcedure,
			connect.WithSchema(gRPCInferenceServiceCudaSharedMemoryRegisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		cudaSharedMemoryUnregister: connect.NewClient[gen.CudaSharedMemoryUnregisterRequest, gen.CudaSharedMemoryUnregisterResponse](
			httpClient,
			baseURL+GRPCInferenceServiceCudaSharedMemoryUnregisterProcedure,
			connect.WithSchema(gRPCInferenceServiceCudaSharedMemoryUnregisterMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		traceSetting: connect.NewClient[gen.TraceSettingRequest, gen.TraceSettingResponse](
			httpClient,
			baseURL+GRPCInferenceServiceTraceSettingProcedure,
			connect.WithSchema(gRPCInferenceServiceTraceSettingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		logSettings: connect.NewClient[gen.LogSettingsRequest, gen.LogSettingsResponse](
			httpClient,
			baseURL+GRPCInferenceServiceLogSettingsProcedure,
			connect.WithSchema(gRPCInferenceServiceLogSettingsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// gRPCInferenceServiceClient implements GRPCInferenceServiceClient.
type gRPCInferenceServiceClient struct {
	serverLive                   *connect.Client[gen.ServerLiveRequest, gen.ServerLiveResponse]
	serverReady                  *connect.Client[gen.ServerReadyRequest, gen.ServerReadyResponse]
	modelReady                   *connect.Client[gen.ModelReadyRequest, gen.ModelReadyResponse]
	serverMetadata               *connect.Client[gen.ServerMetadataRequest, gen.ServerMetadataResponse]
	modelMetadata                *connect.Client[gen.ModelMetadataRequest, gen.ModelMetadataResponse]
	modelInfer                   *connect.Client[gen.ModelInferRequest, gen.ModelInferResponse]
	modelStreamInfer             *connect.Client[gen.ModelInferRequest, gen.ModelStreamInferResponse]
	modelConfig                  *connect.Client[gen.ModelConfigRequest, gen.ModelConfigResponse]
	modelStatistics              *connect.Client[gen.ModelStatisticsRequest, gen.ModelStatisticsResponse]
	repositoryIndex              *connect.Client[gen.RepositoryIndexRequest, gen.RepositoryIndexResponse]
	repositoryModelLoad          *connect.Client[gen.RepositoryModelLoadRequest, gen.RepositoryModelLoadResponse]
	repositoryModelUnload        *connect.Client[gen.RepositoryModelUnloadRequest, gen.RepositoryModelUnloadResponse]
	systemSharedMemoryStatus     *connect.Client[gen.SystemSharedMemoryStatusRequest, gen.SystemSharedMemoryStatusResponse]
	systemSharedMemoryRegister   *connect.Client[gen.SystemSharedMemoryRegisterRequest, gen.SystemSharedMemoryRegisterResponse]
	systemSharedMemoryUnregister *connect.Client[gen.SystemSharedMemoryUnregisterRequest, gen.SystemSharedMemoryUnregisterResponse]
	cudaSharedMemoryStatus       *connect.Client[gen.CudaSharedMemoryStatusRequest, gen.CudaSharedMemoryStatusResponse]
	cudaSharedMemoryRegister     *connect.Client[gen.CudaSharedMemoryRegisterRequest, gen.CudaSharedMemoryRegisterResponse]
	cudaSharedMemoryUnregister   *connect.Client[gen.CudaSharedMemoryUnregisterRequest, gen.CudaSharedMemoryUnregisterResponse]
	traceSetting                 *connect.Client[gen.TraceSettingRequest, gen.TraceSettingResponse]
	logSettings                  *connect.Client[gen.LogSettingsRequest, gen.LogSettingsResponse]
}

// ServerLive calls inference.GRPCInferenceService.ServerLive.
func (c *gRPCInferenceServiceClient) ServerLive(ctx context.Context, req *connect.Request[gen.ServerLiveRequest]) (*connect.Response[gen.ServerLiveResponse], error) {
	return c.serverLive.CallUnary(ctx, req)
}

// ServerReady calls inference.GRPCInferenceService.ServerReady.
func (c *gRPCInferenceServiceClient) ServerReady(ctx context.Context, req *connect.Request[gen.ServerReadyRequest]) (*connect.Response[gen.ServerReadyResponse], error) {
	return c.serverReady.CallUnary(ctx, req)
}

// ModelReady calls inference.GRPCInferenceService.ModelReady.
func (c *gRPCInferenceServiceClient) ModelReady(ctx context.Context, req *connect.Request[gen.ModelReadyRequest]) (*connect.Response[gen.ModelReadyResponse], error) {
	return c.modelReady.CallUnary(ctx, req)
}

// ServerMetadata calls inference.GRPCInferenceService.ServerMetadata.
func (c *gRPCInferenceServiceClient) ServerMetadata(ctx context.Context, req *connect.Request[gen.ServerMetadataRequest]) (*connect.Response[gen.ServerMetadataResponse], error) {
	return c.serverMetadata.CallUnary(ctx, req)
}

// ModelMetadata calls inference.GRPCInferenceService.ModelMetadata.
func (c *gRPCInferenceServiceClient) ModelMetadata(ctx context.Context, req *connect.Request[gen.ModelMetadataRequest]) (*connect.Response[gen.ModelMetadataResponse], error) {
	return c.modelMetadata.CallUnary(ctx, req)
}

// ModelInfer calls inference.GRPCInferenceService.ModelInfer.
func (c *gRPCInferenceServiceClient) ModelInfer(ctx context.Context, req *connect.Request[gen.ModelInferRequest]) (*connect.Response[gen.ModelInferResponse], error) {
	return c.modelInfer.CallUnary(ctx, req)
}

// ModelStreamInfer calls inference.GRPCInferenceService.ModelStreamInfer.
func (c *gRPCInferenceServiceClient) ModelStreamInfer(ctx context.Context) *connect.BidiStreamForClient[gen.ModelInferRequest, gen.ModelStreamInferResponse] {
	return c.modelStreamInfer.CallBidiStream(ctx)
}

// ModelConfig calls inference.GRPCInferenceService.ModelConfig.
func (c *gRPCInferenceServiceClient) ModelConfig(ctx context.Context, req *connect.Request[gen.ModelConfigRequest]) (*connect.Response[gen.ModelConfigResponse], error) {
	return c.modelConfig.CallUnary(ctx, req)
}

// ModelStatistics calls inference.GRPCInferenceService.ModelStatistics.
func (c *gRPCInferenceServiceClient) ModelStatistics(ctx context.Context, req *connect.Request[gen.ModelStatisticsRequest]) (*connect.Response[gen.ModelStatisticsResponse], error) {
	return c.modelStatistics.CallUnary(ctx, req)
}

// RepositoryIndex calls inference.GRPCInferenceService.RepositoryIndex.
func (c *gRPCInferenceServiceClient) RepositoryIndex(ctx context.Context, req *connect.Request[gen.RepositoryIndexRequest]) (*connect.Response[gen.RepositoryIndexResponse], error) {
	return c.repositoryIndex.CallUnary(ctx, req)
}

// RepositoryModelLoad calls inference.GRPCInferenceService.RepositoryModelLoad.
func (c *gRPCInferenceServiceClient) RepositoryModelLoad(ctx context.Context, req *connect.Request[gen.RepositoryModelLoadRequest]) (*connect.Response[gen.RepositoryModelLoadResponse], error) {
	return c.repositoryModelLoad.CallUnary(ctx, req)
}

// RepositoryModelUnload calls inference.GRPCInferenceService.RepositoryModelUnload.
func (c *gRPCInferenceServiceClient) RepositoryModelUnload(ctx context.Context, req *connect.Request[gen.RepositoryModelUnloadRequest]) (*connect.Response[gen.RepositoryModelUnloadResponse], error) {
	return c.repositoryModelUnload.CallUnary(ctx, req)
}

// SystemSharedMemoryStatus calls inference.GRPCInferenceService.SystemSharedMemoryStatus.
func (c *gRPCInferenceServiceClient) SystemSharedMemoryStatus(ctx context.Context, req *connect.Request[gen.SystemSharedMemoryStatusRequest]) (*connect.Response[gen.SystemSharedMemoryStatusResponse], error) {
	return c.systemSharedMemoryStatus.CallUnary(ctx, req)
}

// SystemSharedMemoryRegister calls inference.GRPCInferenceService.SystemSharedMemoryRegister.
func (c *gRPCInferenceServiceClient) SystemSharedMemoryRegister(ctx context.Context, req *connect.Request[gen.SystemSharedMemoryRegisterRequest]) (*connect.Response[gen.SystemSharedMemoryRegisterResponse], error) {
	return c.systemSharedMemoryRegister.CallUnary(ctx, req)
}

// SystemSharedMemoryUnregister calls inference.GRPCInferenceService.SystemSharedMemoryUnregister.
func (c *gRPCInferenceServiceClient) SystemSharedMemoryUnregister(ctx context.Context, req *connect.Request[gen.SystemSharedMemoryUnregisterRequest]) (*connect.Response[gen.SystemSharedMemoryUnregisterResponse], error) {
	return c.systemSharedMemoryUnregister.CallUnary(ctx, req)
}

// CudaSharedMemoryStatus calls inference.GRPCInferenceService.CudaSharedMemoryStatus.
func (c *gRPCInferenceServiceClient) CudaSharedMemoryStatus(ctx context.Context, req *connect.Request[gen.CudaSharedMemoryStatusRequest]) (*connect.Response[gen.CudaSharedMemoryStatusResponse], error) {
	return c.cudaSharedMemoryStatus.CallUnary(ctx, req)
}

// CudaSharedMemoryRegister calls inference.GRPCInferenceService.CudaSharedMemoryRegister.
func (c *gRPCInferenceServiceClient) CudaSharedMemoryRegister(ctx context.Context, req *connect.Request[gen.CudaSharedMemoryRegisterRequest]) (*connect.Response[gen.CudaSharedMemoryRegisterResponse], error) {
	return c.cudaSharedMemoryRegister.CallUnary(ctx, req)
}

// CudaSharedMemoryUnregister calls inference.GRPCInferenceService.CudaSharedMemoryUnregister.
func (c *gRPCInferenceServiceClient) CudaSharedMemoryUnregister(ctx context.Context, req *connect.Request[gen.CudaSharedMemoryUnregisterRequest]) (*connect.Response[gen.CudaSharedMemoryUnregisterResponse], error) {
	return c.cudaSharedMemoryUnregister.CallUnary(ctx, req)
}

// TraceSetting calls inference.GRPCInferenceService.TraceSetting.
func (c *gRPCInferenceServiceClient) TraceSetting(ctx context.Context, req *connect.Request[gen.TraceSettingRequest]) (*connect.Response[gen.TraceSettingResponse], error) {
	return c.traceSetting.CallUnary(ctx, req)
}

// LogSettings calls inference.GRPCInferenceService.LogSettings.
func (c *gRPCInferenceServiceClient) LogSettings(ctx context.Context, req *connect.Request[gen.LogSettingsRequest]) (*connect.Response[gen.LogSettingsResponse], error) {
	return c.logSettings.CallUnary(ctx, req)
}

// GRPCInferenceServiceHandler is an implementation of the inference.GRPCInferenceService service.
type GRPCInferenceServiceHandler interface {
	// @@  .. cpp:var:: rpc ServerLive(ServerLiveRequest) returns
	// @@       (ServerLiveResponse)
	// @@
	// @@     Check liveness of the inference server.
	// @@
	ServerLive(context.Context, *connect.Request[gen.ServerLiveRequest]) (*connect.Response[gen.ServerLiveResponse], error)
	// @@  .. cpp:var:: rpc ServerReady(ServerReadyRequest) returns
	// @@       (ServerReadyResponse)
	// @@
	// @@     Check readiness of the inference server.
	// @@
	ServerReady(context.Context, *connect.Request[gen.ServerReadyRequest]) (*connect.Response[gen.ServerReadyResponse], error)
	// @@  .. cpp:var:: rpc ModelReady(ModelReadyRequest) returns
	// @@       (ModelReadyResponse)
	// @@
	// @@     Check readiness of a model in the inference server.
	// @@
	ModelReady(context.Context, *connect.Request[gen.ModelReadyRequest]) (*connect.Response[gen.ModelReadyResponse], error)
	// @@  .. cpp:var:: rpc ServerMetadata(ServerMetadataRequest) returns
	// @@       (ServerMetadataResponse)
	// @@
	// @@     Get server metadata.
	// @@
	ServerMetadata(context.Context, *connect.Request[gen.ServerMetadataRequest]) (*connect.Response[gen.ServerMetadataResponse], error)
	// @@  .. cpp:var:: rpc ModelMetadata(ModelMetadataRequest) returns
	// @@       (ModelMetadataResponse)
	// @@
	// @@     Get model metadata.
	// @@
	ModelMetadata(context.Context, *connect.Request[gen.ModelMetadataRequest]) (*connect.Response[gen.ModelMetadataResponse], error)
	// @@  .. cpp:var:: rpc ModelInfer(ModelInferRequest) returns
	// @@       (ModelInferResponse)
	// @@
	// @@     Perform inference using a specific model.
	// @@
	ModelInfer(context.Context, *connect.Request[gen.ModelInferRequest]) (*connect.Response[gen.ModelInferResponse], error)
	// @@  .. cpp:var:: rpc ModelStreamInfer(stream ModelInferRequest) returns
	// @@       (stream ModelStreamInferResponse)
	// @@
	// @@     Perform streaming inference.
	// @@
	ModelStreamInfer(context.Context, *connect.BidiStream[gen.ModelInferRequest, gen.ModelStreamInferResponse]) error
	// @@  .. cpp:var:: rpc ModelConfig(ModelConfigRequest) returns
	// @@       (ModelConfigResponse)
	// @@
	// @@     Get model configuration.
	// @@
	ModelConfig(context.Context, *connect.Request[gen.ModelConfigRequest]) (*connect.Response[gen.ModelConfigResponse], error)
	// @@  .. cpp:var:: rpc ModelStatistics(
	// @@                     ModelStatisticsRequest)
	// @@                   returns (ModelStatisticsResponse)
	// @@
	// @@     Get the cumulative inference statistics for a model.
	// @@
	ModelStatistics(context.Context, *connect.Request[gen.ModelStatisticsRequest]) (*connect.Response[gen.ModelStatisticsResponse], error)
	// @@  .. cpp:var:: rpc RepositoryIndex(RepositoryIndexRequest) returns
	// @@       (RepositoryIndexResponse)
	// @@
	// @@     Get the index of model repository contents.
	// @@
	RepositoryIndex(context.Context, *connect.Request[gen.RepositoryIndexRequest]) (*connect.Response[gen.RepositoryIndexResponse], error)
	// @@  .. cpp:var:: rpc RepositoryModelLoad(RepositoryModelLoadRequest) returns
	// @@       (RepositoryModelLoadResponse)
	// @@
	// @@     Load or reload a model from a repository.
	// @@
	RepositoryModelLoad(context.Context, *connect.Request[gen.RepositoryModelLoadRequest]) (*connect.Response[gen.RepositoryModelLoadResponse], error)
	// @@  .. cpp:var:: rpc RepositoryModelUnload(RepositoryModelUnloadRequest)
	// @@       returns (RepositoryModelUnloadResponse)
	// @@
	// @@     Unload a model.
	// @@
	RepositoryModelUnload(context.Context, *connect.Request[gen.RepositoryModelUnloadRequest]) (*connect.Response[gen.RepositoryModelUnloadResponse], error)
	// @@  .. cpp:var:: rpc SystemSharedMemoryStatus(
	// @@                     SystemSharedMemoryStatusRequest)
	// @@                   returns (SystemSharedMemoryStatusRespose)
	// @@
	// @@     Get the status of all registered system-shared-memory regions.
	// @@
	SystemSharedMemoryStatus(context.Context, *connect.Request[gen.SystemSharedMemoryStatusRequest]) (*connect.Response[gen.SystemSharedMemoryStatusResponse], error)
	// @@  .. cpp:var:: rpc SystemSharedMemoryRegister(
	// @@                     SystemSharedMemoryRegisterRequest)
	// @@                   returns (SystemSharedMemoryRegisterResponse)
	// @@
	// @@     Register a system-shared-memory region.
	// @@
	SystemSharedMemoryRegister(context.Context, *connect.Request[gen.SystemSharedMemoryRegisterRequest]) (*connect.Response[gen.SystemSharedMemoryRegisterResponse], error)
	// @@  .. cpp:var:: rpc SystemSharedMemoryUnregister(
	// @@                     SystemSharedMemoryUnregisterRequest)
	// @@                   returns (SystemSharedMemoryUnregisterResponse)
	// @@
	// @@     Unregister a system-shared-memory region.
	// @@
	SystemSharedMemoryUnregister(context.Context, *connect.Request[gen.SystemSharedMemoryUnregisterRequest]) (*connect.Response[gen.SystemSharedMemoryUnregisterResponse], error)
	// @@  .. cpp:var:: rpc CudaSharedMemoryStatus(
	// @@                     CudaSharedMemoryStatusRequest)
	// @@                   returns (CudaSharedMemoryStatusRespose)
	// @@
	// @@     Get the status of all registered CUDA-shared-memory regions.
	// @@
	CudaSharedMemoryStatus(context.Context, *connect.Request[gen.CudaSharedMemoryStatusRequest]) (*connect.Response[gen.CudaSharedMemoryStatusResponse], error)
	// @@  .. cpp:var:: rpc CudaSharedMemoryRegister(
	// @@                     CudaSharedMemoryRegisterRequest)
	// @@                   returns (CudaSharedMemoryRegisterResponse)
	// @@
	// @@     Register a CUDA-shared-memory region.
	// @@
	CudaSharedMemoryRegister(context.Context, *connect.Request[gen.CudaSharedMemoryRegisterRequest]) (*connect.Response[gen.CudaSharedMemoryRegisterResponse], error)
	// @@  .. cpp:var:: rpc CudaSharedMemoryUnregister(
	// @@                     CudaSharedMemoryUnregisterRequest)
	// @@                   returns (CudaSharedMemoryUnregisterResponse)
	// @@
	// @@     Unregister a CUDA-shared-memory region.
	// @@
	CudaSharedMemoryUnregister(context.Context, *connect.Request[gen.CudaSharedMemoryUnregisterRequest]) (*connect.Response[gen.CudaSharedMemoryUnregisterResponse], error)
	// @@  .. cpp:var:: rpc TraceSetting(TraceSettingRequest)
	// @@                   returns (TraceSettingResponse)
	// @@
	// @@     Update and get the trace setting of the Triton server.
	// @@
	TraceSetting(context.Context, *connect.Request[gen.TraceSettingRequest]) (*connect.Response[gen.TraceSettingResponse], error)
	// @@  .. cpp:var:: rpc LogSettings(LogSettingsRequest)
	// @@                   returns (LogSettingsResponse)
	// @@
	// @@     Update and get the log settings of the Triton server.
	// @@
	LogSettings(context.Context, *connect.Request[gen.LogSettingsRequest]) (*connect.Response[gen.LogSettingsResponse], error)
}

// NewGRPCInferenceServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGRPCInferenceServiceHandler(svc GRPCInferenceServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	gRPCInferenceServiceServerLiveHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceServerLiveProcedure,
		svc.ServerLive,
		connect.WithSchema(gRPCInferenceServiceServerLiveMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceServerReadyHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceServerReadyProcedure,
		svc.ServerReady,
		connect.WithSchema(gRPCInferenceServiceServerReadyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceModelReadyHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceModelReadyProcedure,
		svc.ModelReady,
		connect.WithSchema(gRPCInferenceServiceModelReadyMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceServerMetadataHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceServerMetadataProcedure,
		svc.ServerMetadata,
		connect.WithSchema(gRPCInferenceServiceServerMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceModelMetadataHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceModelMetadataProcedure,
		svc.ModelMetadata,
		connect.WithSchema(gRPCInferenceServiceModelMetadataMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceModelInferHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceModelInferProcedure,
		svc.ModelInfer,
		connect.WithSchema(gRPCInferenceServiceModelInferMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceModelStreamInferHandler := connect.NewBidiStreamHandler(
		GRPCInferenceServiceModelStreamInferProcedure,
		svc.ModelStreamInfer,
		connect.WithSchema(gRPCInferenceServiceModelStreamInferMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceModelConfigHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceModelConfigProcedure,
		svc.ModelConfig,
		connect.WithSchema(gRPCInferenceServiceModelConfigMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceModelStatisticsHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceModelStatisticsProcedure,
		svc.ModelStatistics,
		connect.WithSchema(gRPCInferenceServiceModelStatisticsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceRepositoryIndexHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceRepositoryIndexProcedure,
		svc.RepositoryIndex,
		connect.WithSchema(gRPCInferenceServiceRepositoryIndexMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceRepositoryModelLoadHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceRepositoryModelLoadProcedure,
		svc.RepositoryModelLoad,
		connect.WithSchema(gRPCInferenceServiceRepositoryModelLoadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceRepositoryModelUnloadHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceRepositoryModelUnloadProcedure,
		svc.RepositoryModelUnload,
		connect.WithSchema(gRPCInferenceServiceRepositoryModelUnloadMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceSystemSharedMemoryStatusHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceSystemSharedMemoryStatusProcedure,
		svc.SystemSharedMemoryStatus,
		connect.WithSchema(gRPCInferenceServiceSystemSharedMemoryStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceSystemSharedMemoryRegisterHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceSystemSharedMemoryRegisterProcedure,
		svc.SystemSharedMemoryRegister,
		connect.WithSchema(gRPCInferenceServiceSystemSharedMemoryRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceSystemSharedMemoryUnregisterHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceSystemSharedMemoryUnregisterProcedure,
		svc.SystemSharedMemoryUnregister,
		connect.WithSchema(gRPCInferenceServiceSystemSharedMemoryUnregisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceCudaSharedMemoryStatusHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceCudaSharedMemoryStatusProcedure,
		svc.CudaSharedMemoryStatus,
		connect.WithSchema(gRPCInferenceServiceCudaSharedMemoryStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceCudaSharedMemoryRegisterHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceCudaSharedMemoryRegisterProcedure,
		svc.CudaSharedMemoryRegister,
		connect.WithSchema(gRPCInferenceServiceCudaSharedMemoryRegisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceCudaSharedMemoryUnregisterHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceCudaSharedMemoryUnregisterProcedure,
		svc.CudaSharedMemoryUnregister,
		connect.WithSchema(gRPCInferenceServiceCudaSharedMemoryUnregisterMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceTraceSettingHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceTraceSettingProcedure,
		svc.TraceSetting,
		connect.WithSchema(gRPCInferenceServiceTraceSettingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	gRPCInferenceServiceLogSettingsHandler := connect.NewUnaryHandler(
		GRPCInferenceServiceLogSettingsProcedure,
		svc.LogSettings,
		connect.WithSchema(gRPCInferenceServiceLogSettingsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/inference.GRPCInferenceService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GRPCInferenceServiceServerLiveProcedure:
			gRPCInferenceServiceServerLiveHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceServerReadyProcedure:
			gRPCInferenceServiceServerReadyHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceModelReadyProcedure:
			gRPCInferenceServiceModelReadyHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceServerMetadataProcedure:
			gRPCInferenceServiceServerMetadataHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceModelMetadataProcedure:
			gRPCInferenceServiceModelMetadataHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceModelInferProcedure:
			gRPCInferenceServiceModelInferHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceModelStreamInferProcedure:
			gRPCInferenceServiceModelStreamInferHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceModelConfigProcedure:
			gRPCInferenceServiceModelConfigHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceModelStatisticsProcedure:
			gRPCInferenceServiceModelStatisticsHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceRepositoryIndexProcedure:
			gRPCInferenceServiceRepositoryIndexHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceRepositoryModelLoadProcedure:
			gRPCInferenceServiceRepositoryModelLoadHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceRepositoryModelUnloadProcedure:
			gRPCInferenceServiceRepositoryModelUnloadHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceSystemSharedMemoryStatusProcedure:
			gRPCInferenceServiceSystemSharedMemoryStatusHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceSystemSharedMemoryRegisterProcedure:
			gRPCInferenceServiceSystemSharedMemoryRegisterHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceSystemSharedMemoryUnregisterProcedure:
			gRPCInferenceServiceSystemSharedMemoryUnregisterHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceCudaSharedMemoryStatusProcedure:
			gRPCInferenceServiceCudaSharedMemoryStatusHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceCudaSharedMemoryRegisterProcedure:
			gRPCInferenceServiceCudaSharedMemoryRegisterHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceCudaSharedMemoryUnregisterProcedure:
			gRPCInferenceServiceCudaSharedMemoryUnregisterHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceTraceSettingProcedure:
			gRPCInferenceServiceTraceSettingHandler.ServeHTTP(w, r)
		case GRPCInferenceServiceLogSettingsProcedure:
			gRPCInferenceServiceLogSettingsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGRPCInferenceServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGRPCInferenceServiceHandler struct{}

func (UnimplementedGRPCInferenceServiceHandler) ServerLive(context.Context, *connect.Request[gen.ServerLiveRequest]) (*connect.Response[gen.ServerLiveResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ServerLive is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) ServerReady(context.Context, *connect.Request[gen.ServerReadyRequest]) (*connect.Response[gen.ServerReadyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ServerReady is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) ModelReady(context.Context, *connect.Request[gen.ModelReadyRequest]) (*connect.Response[gen.ModelReadyResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ModelReady is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) ServerMetadata(context.Context, *connect.Request[gen.ServerMetadataRequest]) (*connect.Response[gen.ServerMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ServerMetadata is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) ModelMetadata(context.Context, *connect.Request[gen.ModelMetadataRequest]) (*connect.Response[gen.ModelMetadataResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ModelMetadata is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) ModelInfer(context.Context, *connect.Request[gen.ModelInferRequest]) (*connect.Response[gen.ModelInferResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ModelInfer is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) ModelStreamInfer(context.Context, *connect.BidiStream[gen.ModelInferRequest, gen.ModelStreamInferResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ModelStreamInfer is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) ModelConfig(context.Context, *connect.Request[gen.ModelConfigRequest]) (*connect.Response[gen.ModelConfigResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ModelConfig is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) ModelStatistics(context.Context, *connect.Request[gen.ModelStatisticsRequest]) (*connect.Response[gen.ModelStatisticsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.ModelStatistics is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) RepositoryIndex(context.Context, *connect.Request[gen.RepositoryIndexRequest]) (*connect.Response[gen.RepositoryIndexResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.RepositoryIndex is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) RepositoryModelLoad(context.Context, *connect.Request[gen.RepositoryModelLoadRequest]) (*connect.Response[gen.RepositoryModelLoadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.RepositoryModelLoad is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) RepositoryModelUnload(context.Context, *connect.Request[gen.RepositoryModelUnloadRequest]) (*connect.Response[gen.RepositoryModelUnloadResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.RepositoryModelUnload is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) SystemSharedMemoryStatus(context.Context, *connect.Request[gen.SystemSharedMemoryStatusRequest]) (*connect.Response[gen.SystemSharedMemoryStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.SystemSharedMemoryStatus is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) SystemSharedMemoryRegister(context.Context, *connect.Request[gen.SystemSharedMemoryRegisterRequest]) (*connect.Response[gen.SystemSharedMemoryRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.SystemSharedMemoryRegister is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) SystemSharedMemoryUnregister(context.Context, *connect.Request[gen.SystemSharedMemoryUnregisterRequest]) (*connect.Response[gen.SystemSharedMemoryUnregisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.SystemSharedMemoryUnregister is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) CudaSharedMemoryStatus(context.Context, *connect.Request[gen.CudaSharedMemoryStatusRequest]) (*connect.Response[gen.CudaSharedMemoryStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.CudaSharedMemoryStatus is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) CudaSharedMemoryRegister(context.Context, *connect.Request[gen.CudaSharedMemoryRegisterRequest]) (*connect.Response[gen.CudaSharedMemoryRegisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.CudaSharedMemoryRegister is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) CudaSharedMemoryUnregister(context.Context, *connect.Request[gen.CudaSharedMemoryUnregisterRequest]) (*connect.Response[gen.CudaSharedMemoryUnregisterResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.CudaSharedMemoryUnregister is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) TraceSetting(context.Context, *connect.Request[gen.TraceSettingRequest]) (*connect.Response[gen.TraceSettingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.TraceSetting is not implemented"))
}

func (UnimplementedGRPCInferenceServiceHandler) LogSettings(context.Context, *connect.Request[gen.LogSettingsRequest]) (*connect.Response[gen.LogSettingsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("inference.GRPCInferenceService.LogSettings is not implemented"))
}
